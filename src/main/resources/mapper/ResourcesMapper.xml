<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.learncommunity.dao.ResourcesMapper">
    <resultMap id="BaseResultMap" type="org.learncommunity.entity.Resources">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="uploaderid" property="uploaderid" jdbcType="INTEGER"/>
        <result column="type" property="type" jdbcType="VARCHAR"/>
        <result column="time" property="time" jdbcType="TIMESTAMP"/>
        <result column="root" property="root" jdbcType="INTEGER"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="url" property="url" jdbcType="VARCHAR"/>
        <result column="price" property="price" jdbcType="DOUBLE"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, name, uploaderid, type, time, root, description, url, price
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from resources
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from resources
    </select>
    <select id="selectByCourseType" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"></include>
        from resources
        where
        type = #{type,jdbcType=VARCHAR}
    </select>
    <select id="selectByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        SELECT
        <include refid="Base_Column_List"></include>
        from resources
        WHERE
        uploaderid = #{uploaderid,jdbcType=INTEGER}
        LIMIT #{offset},#{limit}
    </select>
    <select id="selectByNameOrType" resultMap="BaseResultMap" parameterType="java.lang.String">
        SELECT
        <include refid="Base_Column_List"></include>
        from resources INNER JOIN (SELECT id from resources
        where name LIKE CONCAT('%',#{name,jdbcType=VARCHAR},'%') OR type LIKE CONCAT('%',#{type,jdbcType=VARCHAR},'%')
        order by id desc LIMIT #{offset},#{limit}) AS a USING (id)

    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from resources
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="org.learncommunity.entity.Resources">
    insert into resources (id, name, uploaderid, 
      type, time, root, 
      description, url, price
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{uploaderid,jdbcType=INTEGER}, 
      #{type,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, #{root,jdbcType=INTEGER}, 
      #{description,jdbcType=VARCHAR}, #{url,jdbcType=VARCHAR}, #{price,jdbcType=DOUBLE}
      )
  </insert>
    <insert id="insertSelective" parameterType="org.learncommunity.entity.Resources">
        insert into resources
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="uploaderid != null">
                uploaderid,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="time != null">
                time,
            </if>
            <if test="root != null">
                root,
            </if>
            <if test="description != null">
                description,
            </if>
            <if test="url != null">
                url,
            </if>
            <if test="price != null">
                price,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="uploaderid != null">
                #{uploaderid,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="time != null">
                #{time,jdbcType=TIMESTAMP},
            </if>
            <if test="root != null">
                #{root,jdbcType=INTEGER},
            </if>
            <if test="description != null">
                #{description,jdbcType=VARCHAR},
            </if>
            <if test="url != null">
                #{url,jdbcType=VARCHAR},
            </if>
            <if test="price != null">
                #{price,jdbcType=DOUBLE},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="org.learncommunity.entity.Resources">
        update resources
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="uploaderid != null">
                uploaderid = #{uploaderid,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR},
            </if>
            <if test="time != null">
                time = #{time,jdbcType=TIMESTAMP},
            </if>
            <if test="root != null">
                root = #{root,jdbcType=INTEGER},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="url != null">
                url = #{url,jdbcType=VARCHAR},
            </if>
            <if test="price != null">
                price = #{price,jdbcType=DOUBLE},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="org.learncommunity.entity.Resources">
    update resources
    set name = #{name,jdbcType=VARCHAR},
      uploaderid = #{uploaderid,jdbcType=INTEGER},
      type = #{type,jdbcType=VARCHAR},
      time = #{time,jdbcType=TIMESTAMP},
      root = #{root,jdbcType=INTEGER},
      description = #{description,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      price = #{price,jdbcType=DOUBLE}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>